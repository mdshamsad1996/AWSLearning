AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  myvpc:
    Type: String
    Default: vpc-0734738edb98303ad
    
  mySubnets:
    Type: List<String>
    Default: subnet-0eb1b0671f2ff47f6, subnet-05b9074aafa3f65f9
    


Resources:
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup
      HealthCheckEnabled: true
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /index.html
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetType: instance
      Port: 80
      Protocol: HTTP
      VpcId: !Ref myvpc
      
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref mySubnets
      Name: MyLoadBalancer
      SecurityGroups: [!Ref LoadBalancerSecurityGroup]
      Scheme: internet-facing
      Type: application
      
      
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref myvpc
      SecurityGroupIngress:
        - 
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
       
        -
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0 
Outputs:
  StackForLoadBalancer:
    Value: !Ref TargetGroup
    Export:
      Name: TargetGroupARNForAutoScaling